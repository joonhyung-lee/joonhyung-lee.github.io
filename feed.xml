<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://joonhyung-lee.github.io//feed.xml" rel="self" type="application/atom+xml"/><link href="https://joonhyung-lee.github.io//" rel="alternate" type="text/html" hreflang="en"/><updated>2025-07-09T04:31:40+00:00</updated><id>https://joonhyung-lee.github.io//feed.xml</id><title type="html">Joel Lee</title><subtitle>Joel&apos;s website </subtitle><entry><title type="html">Flow Matching</title><link href="https://joonhyung-lee.github.io//blog/2025/flow-matching/" rel="alternate" type="text/html" title="Flow Matching"/><published>2025-07-09T00:00:00+00:00</published><updated>2025-07-09T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2025/flow-matching</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2025/flow-matching/"><![CDATA[<h2 id="motivation">Motivation</h2> <p>최근 생성 모델에서 두각을 드러내고 있는 두 가지 접근 방식은 <strong>Diffusion 모델</strong>과 <strong>Flow Matching</strong>이다. 이 두 기법은 겉보기엔 유사해 보이지만, 실제로는 어떤 관계인지 헷갈리기 쉽다. 이 글은 Google DeepMind의 Article <a href="https://diffusionflow.github.io/">“Diffusion Meets Flow Matching: Two Sides of the Same Coin”</a>을 바탕으로, 이 두 framework의 본질적인 equivalence을 정리하고, 실질적으로 상호 변환 가능한 구조라는 것을 설명한다.</p> <h2 id="overview">Overview</h2> <h3 id="diffusion-모델">Diffusion 모델</h3> <ul> <li>데이터를 점점 노이즈로 덮어씌우는 <strong>forward process</strong>과, 노이즈로부터 데이터를 복원하는 <strong>reverse process</strong>으로 구성됨.</li> <li>대표적인 sampling 방법으로 <strong>DDIM(Denoising Diffusion Implicit Models)</strong>이 있음. 이는 deterministic한 방법이며, 초기 노이즈로부터 점진적으로 깨끗한 샘플로 이동함. (그러나 모델 학습은 여전히 implicit density modeling 이다. 즉, likelihood를 명시적으로 정하지 않으며, sampling 과정을 통해 데이터를 생성한다.)</li> </ul> <blockquote> <h2 id="summary">Summary:</h2> <p><strong>DDPM (Denoising Diffusion Probabilistic Models)</strong></p> <ul> <li> <p>stochastic forward &amp; backward SDE (noise injection 포함)</p> </li> <li> <p>sampling은 stochastic, likelihood-based training</p> </li> </ul> <p><strong>DDIM (Denoising Diffusion Implicit Models)</strong></p> <ul> <li> <p>같은 학습 방식 사용, 같은 사전 훈련 모델 사용</p> </li> <li> <p>단지 sampling 과정만 deterministic하게 재구성</p> </li> <li> <p>deterministic ODE 기반의 sampling</p> </li> <li> <p>여전히 explicit한 likelihood는 없으므로 implicit model</p> </li> </ul> </blockquote> <h3 id="flow-matching">Flow Matching</h3> <ul> <li>데이터와 노이즈 간의 <strong>Linear Interpolation</strong>을 고려함. 특히 Gaussian noise를 사용할 경우, diffusion 모델과 동일한 Forward 과정이 됨.</li> <li>핵심은 <strong>velocity field</strong> 를 학습하는 것. 이를 기반으로 deterministic하게 샘플링 가능.</li> </ul> <blockquote> <h2 id="summary-1">Summary:</h2> <h3 id="중요한-유사점">중요한 유사점</h3> <ul> <li> <p>Forward 과정이 동일함 (Gaussian noise로 가정했을 때에).</p> </li> <li> <p>Sampling 또한 본질적으로 동일하며, DDIM = Flow Matching Euler Sampler임.</p> </li> </ul> </blockquote> <h2 id="sampling">Sampling</h2> <ul> <li>일반적으로 diffusion은 <strong>곡선 경로</strong>, flow matching은 <strong>직선 경로</strong>라 알려졌으나 이는 오해임.</li> <li>실제로는 모델이 <strong>정확</strong>할 때만 직선 경로가 나오며, 현실적 분포에서는 noise schedule에 따라 경로가 달라짐.</li> </ul> <blockquote> <h2 id="summary-2">Summary:</h2> <ul> <li> <p><strong>DDIM = Flow Matching (Euler 방식)</strong></p> </li> <li> <p>noise schedule에 linear scaling을 적용해도 결과 샘플은 동일함 (sampling path만 달라짐)</p> </li> </ul> </blockquote> <h2 id="training">Training</h2> <ul> <li>Diffusion과 Flow Matching 모두, MSE 기반의 손실함수 사용: <ul> <li>(i.e.,: $\mathbb{E}[| \hat{x}_\lambda - x |^2]$)</li> </ul> </li> <li>Flow Matching은 <strong>vector field</strong> ($\vec{v}_t$)를 직접 예측하는 형태를 사용함.</li> <li>Network 출력은 다양하지만, 적절한 reweighting을 통해 모두 같은 목적함수로 변경 가능함.</li> <li>Flow Matching에서 제안된 출력 형태는 $\hat{v}_{\mathrm{prediction}}$과 유사하며, High/Low Frequency 영역 모두에서 안정적임.</li> </ul> <h3 id="weighting-function">Weighting Function</h3> <ul> <li>학습 시 가장 중요한 것은 <strong>weighting function</strong>임.</li> <li>이는 고주파/저주파 구성 성분의 중요도를 조절하여, 모델이 더 유의미한 특징에 집중하게 함.</li> <li>Flow Matching에서 사용되는 가중치는, diffusion에서 자주 쓰이는 <strong>$\hat{v}_{\mathrm{MSE}}$ + cosine schedule weighting</strong>과 동일함.</li> </ul> <h3 id="noise-schedule">Noise Schedule</h3> <ul> <li>학습에서 noise schedule은 비교적 덜 중요함.</li> <li>핵심은 log SNR(i.e., Signal Noise Rate)이 양 끝단에서 잘 정의되어 있는지임.</li> </ul> <h2 id="sampler-비교">Sampler 비교</h2> <h3 id="deterministic-vs-stochastic">Deterministic vs Stochastic</h3> <ul> <li>DDIM은 deterministic 샘플러이며, flow matching과 동일.</li> <li>DDPM은 stochastic하며, 샘플링 중간에 랜덤성을 추가함.</li> <li>이 두 방식은 서로 <strong>reparameterizable</strong> 하며, 중간에 renoising step을 추가하면 양자 간 혼합도 가능함.</li> </ul> <h3 id="churn">Churn</h3> <ul> <li>샘플링 과정에서 <strong>초기 예측보다 후기 예측에 더 무게를 두기 위한 기법</strong>임.</li> <li>초기 단계의 불확실성을 줄이고, 후기의 더 정확한 예측에 비중을 높임.</li> </ul> <h2 id="수학적-관점-ode-vs-sde">수학적 관점: ODE vs SDE</h2> <ul> <li>Diffusion은 <strong>확률 미분방정식(SDE)</strong> 로 설명됨: Brownian motion 기반.</li> <li>Flow Matching은 <strong>결정론적 미분방정식(ODE)</strong> 로 설명됨.</li> <li>SDE와 ODE 모두 같은 표현을 가질 수 있으며, 서로 변환 가능함.</li> </ul> <h2 id="결론">결론</h2> <ol> <li><strong>Diffusion 모델과 Flow Matching은 Gaussian 가정 하에 본질적으로 동일</strong>하다.</li> <li><strong>Flow Matching의 새로운 기여</strong>: <ul> <li>새로운 Vector Field 기반의 네트워크 출력 제안</li> <li>단순한 noise schedule로도 동일한 샘플링 가능</li> </ul> </li> <li>이 equivalence 덕분에 두 framework 간 <strong>혼합해서 사용이 가능</strong>하며, 실제 응용에서 매우 유용할 수 있음.</li> <li>향후 연구는 Gaussian 이외의 분포로의 확장 (예: 구조화된 데이터, 단백질 등)에 초점을 둘 수 있다.</li> </ol>]]></content><author><name></name></author><category term="Generative Models"/><category term="Flow Matching"/><category term="Generative Models"/><category term="ICLR"/><category term="2023"/><summary type="html"><![CDATA[Flow Matching]]></summary></entry><entry><title type="html">Generative Agents</title><link href="https://joonhyung-lee.github.io//blog/2025/generative-agents/" rel="alternate" type="text/html" title="Generative Agents"/><published>2025-07-04T00:00:00+00:00</published><updated>2025-07-04T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2025/generative-agents</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2025/generative-agents/"><![CDATA[<div style="text-align: center;"> <img src="/assets/img/ga/overview.png" style="max-width: 50%; height: auto;"/> </div> <h2 id="motivation">Motivation</h2> <ul> <li>기존의 게임 NPC, 시뮬레이션 에이전트, 사회학 실험용 인공사회 모델 등은 <strong>short-term context 기반 rule-based/finite-state behavior</strong>에 머물렀음.</li> <li>인간과 비슷한 장기적 일관성, 기억에 기반한 행동 변화, 관계 형성, 정보 확산 등은 구현 불가능했음.</li> <li>LLM의 언어적 시뮬레이션 능력 덕분에 <strong>“Believable social agents”</strong> 가능성이 열림 → 하지만 <strong>memory, reflection, planning 같은 장기 coherence 구조 부재</strong>.</li> </ul> <h2 id="main-contributions">Main Contributions</h2> <ol> <li><strong>Generative Agent라는 새로운 개념 제안</strong> <ul> <li><strong>장기 기억</strong>, <strong>상황별 memory retrieval</strong>, <strong>반성적 reflection</strong>, <strong>일일 계획 수립</strong>, <strong>환경에 따른 재계획</strong>, <strong>실시간 대화</strong> 능력을 갖춘 에이전트.</li> </ul> </li> <li><strong>LLM + Long-Term Memory 기반 Agent Architecture 제안</strong> <ul> <li>메모리 스트림 (Memory Stream)</li> <li>중요도/관련도/시간가중 기반 memory retrieval</li> <li>Reflection Tree를 통한 자기 일반화 및 inference</li> <li>Hierarchical Planning (하루 계획 → 시간 chunk → 5~15분 행동 단위)</li> <li>Event-driven Reactive behavior loop</li> </ul> </li> <li><strong>Emergent Social Behavior Demonstration</strong> <ul> <li> <p>예시: Valentine’s Day 파티</p> <p>→ 단일 seed intent에서 시작 → Information Diffuse → 초대 → date 신청 → Event</p> </li> </ul> </li> <li><strong>Controlled User Study로 Believability 검증</strong> <ul> <li> <p>Human baseline과 ablation models 대비</p> <p>→ Full architecture &gt; no-reflection &gt; no-reflection/planning &gt; no-memory &gt; human baseline 순으로 성능 우위.</p> </li> </ul> </li> </ol> <h2 id="architecture">Architecture</h2> <div style="text-align: center;"> <img src="/assets/img/ga/architecture.png" style="max-width: 50%; height: auto;"/> </div> <div style="text-align: center;"> <img src="/assets/img/ga/memory_1.png" style="max-width: 22%; height: auto; margin: 0 1%;"/> <img src="/assets/img/ga/memory_2.png" style="max-width: 22%; height: auto; margin: 0 1%;"/> <img src="/assets/img/ga/memory_3.png" style="max-width: 22%; height: auto; margin: 0 1%;"/> <img src="/assets/img/ga/memory_4.png" style="max-width: 22%; height: auto; margin: 0 1%;"/> </div> <ol> <li><strong>Memory Stream</strong> <ul> <li>Agent의 모든 observation, plan, reflection을 natural language로 기록 (timestamp 포함)</li> <li>각 memory에는 <strong>Recency, Importance, Relevance score</strong>가 있음.</li> </ul> </li> <li><strong>Memory Retrieval</strong> <ul> <li><strong>Query-dependent weighted sum</strong>으로 top-k memory 선택</li> <li>Retrieval function: <code class="language-plaintext highlighter-rouge">score = α1·recency + α2·importance + α3·relevance</code></li> <li>Similarity는 embedding 기반 cosine similarity.</li> </ul> </li> <li><strong>Reflection</strong> <ul> <li>일정 중요도 이상 메모리 축적 시 <strong>self-query generation → LLM summarization → reflection memory 생성</strong></li> <li>예: “Klaus is passionate about research” 같은 agent-level generalization 생성</li> <li><strong>Recursive Reflection Tree</strong> 형식으로 저장</li> </ul> </li> <li><strong>Planning</strong> <ul> <li><strong>Day-level → Hour-level → Minute-level top-down hierarchical planning</strong></li> <li>LLM으로 next-day plan 생성 → 하위 행동 시퀀스로 재귀 분할</li> </ul> </li> <li><strong>Action &amp; Reaction</strong> <ul> <li>실시간 상황 입력 → Plan 유지 여부 판단 → 필요 시 Replanning</li> <li>Agent 간 대화 시 <strong>retrieved partner-specific memory + dialogue history</strong>를 context로 사용.</li> </ul> </li> <li><strong>World Grounding</strong> <ul> <li>Smallville sandbox world (The Sims 유사)</li> <li>Environment는 JSON tree → 자연어 표현으로 flatten 후 LLM에 전달</li> <li>User intervention 시 객체 state 변화 반영 → agent가 변화 감지 후 행동.</li> </ul> </li> </ol> <h2 id="주요-실험-evaluation">주요 실험 (Evaluation)</h2> <ol> <li><strong>개별 에이전트 Believability 평가</strong> <ul> <li>Interview 기반 memory recall, planning ability, reflection ability 평가</li> <li>Ablation study로 <strong>reflection과 planning 모듈의 기여도 정량화</strong></li> </ul> </li> <li><strong>End-to-End 시뮬레이션</strong> <ul> <li>2일간의 virtual life 기록</li> <li>정보 전파, 관계 형성, 이벤트 coordination (예: 선거 후보 출마 및 소문 퍼짐, 밸런타인데이 파티 등)</li> <li>Human raters의 believability ranking (TrueSkill 기반 비교)</li> </ul> </li> </ol> <h2 id="limitation--discussion">Limitation &amp; Discussion</h2> <ul> <li>Memory retrieval miss, LLM hallucination, overly formal speech style 등</li> <li>Ethics: <strong>Parasocial relationship 위험</strong>, <strong>deepfake risk</strong>, <strong>persuasion bias</strong>에 대한 우려</li> <li>차후 연구방향: <strong>long-context LLM + structured knowledge integration + realistic social simulation + real-world robotics 적용 가능성</strong></li> </ul> <h2 id="thoughts">Thoughts</h2> <p>Generative Agents는 <strong>LLM의 언어적 생성능력 + Explicit memory / planning / reflection 모듈</strong>을 결합해, 단순한 LLM-based chatbot이나 기존 state-machine agent와는 차별화된 <strong>장기 일관성, 사회적 상호작용, 자기성찰형 behavior 시뮬레이션 플랫폼</strong>을 실현했다는 점에서 의미가 크다.</p>]]></content><author><name></name></author><category term="LLM"/><category term="LLM"/><category term="Generative Agents"/><category term="UIST"/><category term="2023"/><summary type="html"><![CDATA[Generatvie Agents]]></summary></entry><entry><title type="html">uv</title><link href="https://joonhyung-lee.github.io//blog/2025/uv/" rel="alternate" type="text/html" title="uv"/><published>2025-07-03T00:00:00+00:00</published><updated>2025-07-03T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2025/uv</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2025/uv/"><![CDATA[<h2 id="summary">Summary:</h2> <blockquote> <p>UV는 Rust로 개발된 Python 패키지 및 프로젝트 관리 도구로, PIP보다 10배에서 100배 빠른 속도와 가상환경, 의존성 관리, Python 버전 관리 등의 통합적인 기능을 제공합니다. UV는 프로젝트 초기화 시 자동으로 가상환경을 생성하고 의존성을 체계적으로 관리하며, 병렬 처리, 전역 캐시 활용, HTTP/2 지원 등으로 성능을 최적화합니다. 설치와 실행도 간편하며 데이터 분석, 웹 개발, 기계학습 등 다양한 프로젝트에서 활용할 수 있습니다.</p> </blockquote> <table> <thead> <tr> <th>작업</th> <th>pip + venv</th> <th>uv</th> </tr> </thead> <tbody> <tr> <td><strong>프로젝트 초기화</strong></td> <td>mkdir my-project<br/>cd my-project<br/>python -m venv .venv</td> <td>uv init my-project<br/>cd my-project</td> </tr> <tr> <td><strong>가상환경 생성</strong></td> <td>python -m venv .venv</td> <td>자동 생성 (uv init 시)</td> </tr> <tr> <td><strong>가상환경 활성화</strong></td> <td>macOS/Linux: source .venv/bin/activate<br/>Windows: .venv\Scripts\activate</td> <td>자동 활성화 (패키지 설치/실행 시)</td> </tr> <tr> <td><strong>패키지 설치</strong></td> <td>pip install requests</td> <td>uv pip install requests<br/>또는 uv add requests</td> </tr> <tr> <td><strong>의존성 관리</strong></td> <td>pip freeze &gt; requirements.txt<br/>pip install -r requirements.txt</td> <td>uv pip freeze &gt; requirements.txt<br/>uv pip install -r requirements.txt<br/>또는 uv lock, uv sync</td> </tr> <tr> <td><strong>패키지 실행</strong></td> <td>python -m pytest</td> <td>uv run pytest</td> </tr> <tr> <td><strong>개발 의존성 설치</strong></td> <td>pip install –dev pytest</td> <td>uv add –dev pytest</td> </tr> <tr> <td><strong>패키지 제거</strong></td> <td>pip uninstall requests</td> <td>uv pip uninstall requests<br/>또는 uv remove requests</td> </tr> <tr> <td><strong>패키지 업그레이드</strong></td> <td>pip install –upgrade requests</td> <td>uv pip install –upgrade requests</td> </tr> <tr> <td><strong>Python 버전 관리</strong></td> <td>수동 설치 및 관리</td> <td>uv python install 3.11<br/>uv run –python 3.11 script.py</td> </tr> <tr> <td><strong>의존성 해결</strong></td> <td>순차적 처리</td> <td>병렬 처리 (PubGrub 알고리즘)</td> </tr> <tr> <td><strong>캐시 관리</strong></td> <td>프로젝트별 캐시</td> <td>전역 캐시 시스템</td> </tr> <tr> <td><strong>디스크 공간</strong></td> <td>각 프로젝트별 복사본</td> <td>하드 링크 사용으로 효율적</td> </tr> <tr> <td><strong>네트워크 최적화</strong></td> <td>HTTP/1.1</td> <td>HTTP/2 지원, 연결 풀링</td> </tr> </tbody> </table>]]></content><author><name></name></author><category term="Package Manager"/><category term="Python"/><category term="Package Manager"/><summary type="html"><![CDATA[Python Package Manager]]></summary></entry><entry><title type="html">MuJoCo MPC (MJPC)</title><link href="https://joonhyung-lee.github.io//blog/2025/mujoco_mpc/" rel="alternate" type="text/html" title="MuJoCo MPC (MJPC)"/><published>2025-06-27T00:00:00+00:00</published><updated>2025-06-27T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2025/mujoco_mpc</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2025/mujoco_mpc/"><![CDATA[<h3 id="github-repository"><a href="https://github.com/google-deepmind/mujoco_mpc">Github Repository</a></h3> <h2 id="mujoco-mpc-mjpc">MuJoCo MPC (MJPC)</h2> <h3 id="installation">Installation</h3> <p>MJPC is tested with Ubuntu 20.04 and macOS-12. In principle, other versions and Windows operating system should work with MJPC, but these are not tested.</p> <ul> <li>macOS <ul> <li>Install <code class="language-plaintext highlighter-rouge">Xcode</code> &amp; <code class="language-plaintext highlighter-rouge">ninja</code> and <code class="language-plaintext highlighter-rouge">zlib</code>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>ninja zlib
</code></pre></div> </div> </li> </ul> </li> <li>Ubuntu 20.04 <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt-get <span class="nb">install </span>cmake libgl1-mesa-dev libxinerama-dev libxcursor-dev libxrandr-dev libxi-dev ninja-build zlib1g-dev clang-12
</code></pre></div> </div> </li> </ul> <h4 id="configure--build">Configure &amp; Build:</h4> <p>Clone MuJoCo MPC</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/google-deepmind/mujoco_mpc
<span class="nb">cd </span>mujoco_mpc
<span class="nb">mkdir </span>build
<span class="nb">cd </span>build
</code></pre></div></div> <ul> <li>macOS-12 <blockquote> <p>MuJoCo MPC를 macOS-12에서 빌드하려면, <code class="language-plaintext highlighter-rouge">CMakeLists.txt</code> 파일에서 <strong>abseil</strong> 버전 지정 부분을 아래와 같이 수정해야 합니다.</p> </blockquote> <div class="language-cmake highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># TODO(nimrod): Update to the latest version of abseil, or use the one defined</span>
<span class="c1"># by MuJoCo, once grpc fix their build issues.</span>
<span class="nb">set</span><span class="p">(</span>MUJOCO_DEP_VERSION_abseil
    bc257a88f7c1939f24e0379f14a3589e926c950c <span class="c1"># LTS 20230802.1</span>
    CACHE STRING <span class="s2">"Version of `abseil` to be fetched."</span>
    FORCE
<span class="p">)</span>
</code></pre></div> </div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake .. <span class="nt">-DCMAKE_BUILD_TYPE</span>:STRING<span class="o">=</span>Release <span class="nt">-G</span> Ninja <span class="nt">-DMJPC_BUILD_GRPC_SERVICE</span>:BOOL<span class="o">=</span>ON
</code></pre></div> </div> </li> <li>Ubuntu 20.04 <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake .. <span class="nt">-DCMAKE_BUILD_TYPE</span>:STRING<span class="o">=</span>Release <span class="nt">-G</span> Ninja <span class="nt">-DCMAKE_C_COMPILER</span>:STRING<span class="o">=</span>clang-12 <span class="nt">-DCMAKE_CXX_COMPILER</span>:STRING<span class="o">=</span>clang++-12 <span class="nt">-DMJPC_BUILD_GRPC_SERVICE</span>:BOOL<span class="o">=</span>ON
</code></pre></div> </div> </li> </ul> <p>Note: gRPC is a large dependency and can take 10-20 minutes to initially download.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">--</span> Found ZLIB: /Library/Developer/CommandLineTools/SDKs/MacOSX15.4.sdk/usr/lib/libz.tbd <span class="o">(</span>found version <span class="s2">"1.2.12"</span><span class="o">)</span>
<span class="nt">--</span> mujoco::FindOrFetch: checking <span class="k">for </span>targets <span class="k">in </span>package <span class="sb">`</span>gRPC<span class="sb">`</span>
<span class="nt">--</span> mujoco::FindOrFetch: checking <span class="k">for </span>targets <span class="k">in </span>package <span class="sb">`</span>gRPC<span class="sb">`</span> - target <span class="sb">`</span>gRPC<span class="sb">`</span> not defined.
<span class="nt">--</span> mujoco::FindOrFetch: Using FetchContent to retrieve <span class="sb">`</span>gRPC<span class="sb">`</span>
...
...
<span class="nt">--</span> Generating <span class="k">done</span> <span class="o">(</span>1.8s<span class="o">)</span>
<span class="nt">--</span> Build files have been written to: /Users/joonhyung-lee/personal/codes/mujoco_mpc/build
</code></pre></div></div> <p>Now, we can build <code class="language-plaintext highlighter-rouge">mjpc</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cmake <span class="nt">--build</span> <span class="nb">.</span> <span class="nt">--config</span><span class="o">=</span>Release
<span class="nb">cd </span>bin
./mjpc
</code></pre></div></div>]]></content><author><name></name></author><category term="Robotics"/><category term="MuJoCo"/><category term="MPC"/><category term="2025"/><summary type="html"><![CDATA[MuJoCo MPC Installation & Demo]]></summary></entry><entry><title type="html">Action Chunking Transformer</title><link href="https://joonhyung-lee.github.io//blog/2025/act/" rel="alternate" type="text/html" title="Action Chunking Transformer"/><published>2025-06-17T00:00:00+00:00</published><updated>2025-06-17T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2025/act</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2025/act/"><![CDATA[<h2 id="whats-action-chunking-transformer">What’s Action Chunking Transformer?</h2> <blockquote> <p><strong>In the paper:</strong></p> <p>We implement action chunking policy with Transformers, an architecture designed for sequence modeling, and train it as a conditional VAE (CVAE)</p> </blockquote> <h2 id="architecture">Architecture</h2> <p><img src="/assets/img/act/architecture.png" style="max-width: 100%; height: auto;"/></p> <ul> <li>Input: 여러 카메라 이미지, 로봇 상태(qpos), 환경 상태, (학습 시) 행동 시퀀스</li> <li>Backbone: 각 카메라 이미지를 feature로 변환하는 CNN Network</li> <li>Transformer: Sequence modeling, 이미지 feature와 로봇 상태, 잠재 변수 등을 입력받음</li> <li>VAE Encoder: Action sequence를 latent variable z로 인코딩</li> <li>Decoder: latent variable z와 Input을 바탕으로 다음 행동을 예측</li> </ul> <div style="text-align: center;"> <img src="/assets/img/act/act_ensembling.png" style="max-width: 50%; height: auto;"/> </div> <div style="text-align: center;"> <img src="/assets/img/act/act_train.png" style="max-width: 75%; height: auto;"/> </div> <div style="text-align: center;"> <img src="/assets/img/act/act_test.png" style="max-width: 75%; height: auto;"/> </div> <h2 id="how-to-do">How to do?</h2> <p>Github Link: https://github.com/tonyzhaozh/act</p> <h3 id="setup">Setup</h3> <ul> <li>Clone the repository <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">git</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">github</span><span class="p">.</span><span class="n">com</span><span class="o">/</span><span class="n">tonyzhaozh</span><span class="o">/</span><span class="n">act</span><span class="o">/</span><span class="n">tree</span><span class="o">/</span><span class="n">main</span>
</code></pre></div> </div> </li> <li>Create a new conda env <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">conda</span> <span class="n">create</span> <span class="o">-</span><span class="n">n</span> <span class="n">aloha</span> <span class="n">python</span><span class="o">=</span><span class="mf">3.8</span><span class="p">.</span><span class="mi">10</span>
<span class="n">conda</span> <span class="n">activate</span> <span class="n">aloha</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">torchvision</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">torch</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">pyquaternion</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">pyyaml</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">rospkg</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">pexpect</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">mujoco</span><span class="o">==</span><span class="mf">2.3</span><span class="p">.</span><span class="mi">7</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">dm_control</span><span class="o">==</span><span class="mf">1.0</span><span class="p">.</span><span class="mi">14</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">opencv</span><span class="o">-</span><span class="n">python</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">matplotlib</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">einops</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">packaging</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">h5py</span>
<span class="n">pip</span> <span class="n">install</span> <span class="n">ipython</span>
<span class="n">cd</span> <span class="n">act</span><span class="o">/</span><span class="n">detr</span> <span class="o">&amp;&amp;</span> <span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">e</span> <span class="p">.</span>
</code></pre></div> </div> </li> </ul> <h3 id="run-the-script">Run the script</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python3 record_sim_episodes.py <span class="se">\</span>
  <span class="nt">--task_name</span> sim_transfer_cube_scripted <span class="se">\</span>
  <span class="nt">--dataset_dir</span> ./dataset/ <span class="se">\</span>
  <span class="nt">--num_episodes</span> 5  <span class="se">\</span>
  <span class="nt">--onscreen_render</span>
</code></pre></div></div> <hr/> <h3 id="trouble-shooting">Trouble Shooting</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">OSError</span><span class="p">:</span> <span class="nf">dlopen</span><span class="p">(</span><span class="o">/</span><span class="n">System</span><span class="o">/</span><span class="n">Library</span><span class="o">/</span><span class="n">OpenGL</span><span class="p">.</span><span class="n">framework</span><span class="o">/</span><span class="n">OpenGL</span><span class="p">,</span> <span class="mh">0x0006</span><span class="p">):</span> <span class="n">tried</span><span class="p">:</span> <span class="sh">'</span><span class="s">/System/Library/OpenGL.framework/OpenGL</span><span class="sh">'</span> <span class="p">(</span><span class="n">no</span> <span class="n">such</span> <span class="nb">file</span><span class="p">),</span> <span class="sh">'</span><span class="s">/System/Volumes/Preboot/Cryptexes/OS/System/Library/OpenGL.framework/OpenGL</span><span class="sh">'</span> <span class="p">(</span><span class="n">no</span> <span class="n">such</span> <span class="nb">file</span><span class="p">),</span> <span class="sh">'</span><span class="s">/System/Library/OpenGL.framework/OpenGL</span><span class="sh">'</span> <span class="p">(</span><span class="n">no</span> <span class="n">such</span> <span class="nb">file</span><span class="p">,</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">dyld</span> <span class="n">cache</span><span class="p">)</span>
</code></pre></div></div> <ul> <li> <p>Edit this:<br/> <code class="language-plaintext highlighter-rouge">/Users/joonhyung-lee/.pyenv/versions/&lt;virtual-env&gt;/lib/python3.10/site-packages/mujoco/cgl/cgl.py</code></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 기존
</span><span class="n">_CGL</span> <span class="o">=</span> <span class="n">ctypes</span><span class="p">.</span><span class="nc">CDLL</span><span class="p">(</span><span class="sh">'</span><span class="s">/System/Library/OpenGL.framework/OpenGL</span><span class="sh">'</span><span class="p">)</span>

<span class="c1"># 수정
</span><span class="n">_CGL</span> <span class="o">=</span> <span class="n">ctypes</span><span class="p">.</span><span class="nc">CDLL</span><span class="p">(</span><span class="sh">'</span><span class="s">/System/Library/Frameworks/OpenGL.framework/OpenGL</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div> </div> </li> </ul> <hr/> <p>실행 예시:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>episode_idx=0
Rollout out EE space scripted policy
episode_idx=0 Successful, episode_return=630
Replaying joint commands
episode_idx=0 Successful, episode_return=639
Saving: 0.5 secs
</code></pre></div></div> <p><img src="/assets/img/act/visualize.png" style="max-width: 100%; height: auto;"/></p> <div style="text-align: center;"> <video src="/assets/video/act/act_video.mp4" style="max-width: 100%; height: auto;" controls=""></video> </div> <hr/> <h3 id="to-train-act">To train ACT</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Transfer Cube task</span>
python3 imitate_episodes.py <span class="se">\</span>
  <span class="nt">--task_name</span> sim_transfer_cube_scripted <span class="se">\</span>
  <span class="nt">--ckpt_dir</span> ./ckpt/ <span class="se">\</span>
  <span class="nt">--policy_class</span> ACT <span class="nt">--kl_weight</span> 10 <span class="nt">--chunk_size</span> 100 <span class="nt">--hidden_dim</span> 512 <span class="nt">--batch_size</span> 8 <span class="nt">--dim_feedforward</span> 3200 <span class="se">\</span>
  <span class="nt">--num_epochs</span> 2000  <span class="nt">--lr</span> 1e-5 <span class="se">\</span>
  <span class="nt">--seed</span> 0
</code></pre></div></div>]]></content><author><name></name></author><category term="Robotics"/><category term="VLA"/><category term="Robotics"/><category term="RSS"/><category term="2023"/><summary type="html"><![CDATA[ALOHA: Action Chunking Transformer]]></summary></entry><entry><title type="html">Real-Time Operating System(RTOS) in Jetson</title><link href="https://joonhyung-lee.github.io//blog/2025/rtos-jetson/" rel="alternate" type="text/html" title="Real-Time Operating System(RTOS) in Jetson"/><published>2025-06-04T00:00:00+00:00</published><updated>2025-06-04T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2025/rtos-jetson</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2025/rtos-jetson/"><![CDATA[<h2 id="rtos란-무엇인가">RTOS란 무엇인가?</h2> <blockquote> <p><strong>RTOS (Real-Time Operating System)</strong>는 특정 작업이 <strong>정해진 시간 안에 반드시 실행되어야 하는</strong> 시스템을 위한 운영체제이다. Jetson 플랫폼에서 RTOS를 적용하는 주된 목적은 <strong>지연 시간을 줄이고</strong>, <strong>결정론적(deterministic)</strong> 처리를 보장하는 데 있다.</p> </blockquote> <h3 id="일반-커널과-rt-커널의-차이">일반 커널과 RT 커널의 차이</h3> <table> <thead> <tr> <th>항목</th> <th>일반 커널</th> <th>RT 커널 (PREEMPT_RT)</th> </tr> </thead> <tbody> <tr> <td>작업 응답 시간</td> <td>Best-effort</td> <td>결정론적 (Deterministic)</td> </tr> <tr> <td>인터럽트 처리</td> <td>대부분 하드 IRQ</td> <td>Thread 기반 softirq</td> </tr> <tr> <td>스케줄링</td> <td>CFS (공정성 중심)</td> <td>FIFO / Round-Robin (우선순위 기반)</td> </tr> <tr> <td>커널 선점성</td> <td>부분적</td> <td>완전 선점 가능</td> </tr> <tr> <td>사용 사례</td> <td>데스크탑, 서버</td> <td>로봇 제어, 산업 제어, 자율주행 등</td> </tr> </tbody> </table> <h2 id="jetson에서-rt-커널-설치-방법">Jetson에서 RT 커널 설치 방법</h2> <p>Jetson에서는 NVIDIA가 제공하는 RT 커널을 <strong>간단히 패키지 설치 방식으로 적용</strong>할 수 있다.</p> <h3 id="1-커널-버전-확인">1. 커널 버전 확인</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">uname</span> <span class="nt">-r</span>
</code></pre></div></div> <ul> <li>일반 커널: <code class="language-plaintext highlighter-rouge">5.15.148-tegra</code></li> <li>RT 커널: <code class="language-plaintext highlighter-rouge">5.15.148-rt-tegra</code></li> </ul> <h3 id="2-저장소-등록">2. 저장소 등록</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /etc/apt/sources.list.d/nvidia-l4t-apt-source.list
</code></pre></div></div> <p>아래의 내용을 추가한다.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deb https://repo.download.nvidia.com/jetson/rt-kernel r36.4 main
</code></pre></div></div> <h3 id="3-rt-커널-설치">3. RT 커널 설치</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
<span class="nb">sudo </span>apt <span class="nb">install </span>nvidia-l4t-rt-kernel nvidia-l4t-rt-kernel-headers nvidia-l4t-rt-kernel-oot-modules nvidia-l4t-display-rt-kernel
<span class="nb">sudo </span>reboot
</code></pre></div></div> <h3 id="4-부트-커널-전환-설치제거-없이">4. 부트 커널 전환 (설치/제거 없이)</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi /boot/extlinux/extlinux.conf
<span class="c"># DEFAULT 값을 변경:</span>
<span class="c"># - 실시간 커널: DEFAULT real-time</span>
<span class="c"># - 일반 커널: DEFAULT primary</span>
<span class="nb">sudo </span>reboot
</code></pre></div></div> <details> <summary>extlinux.conf 파일 내용</summary> ```bash TIMEOUT 30 DEFAULT real-time MENU TITLE L4T boot options LABEL primary MENU LABEL primary kernel LINUX /boot/Image INITRD /boot/initrd APPEND ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttyTCU0,115200 firmware_class.path=/etc/firmware fbcon=map:0 nospectre_bhb video=efifb:off console=tty0 # When testing a custom kernel, it is recommended that you create a backup of # the original kernel and add a new entry to this file so that the device can # fallback to the original kernel. To do this: # # 1, Make a backup of the original kernel # sudo cp /boot/Image /boot/Image.backup # # 2, Copy your custom kernel into /boot/Image # # 3, Uncomment below menu setting lines for the original kernel # # 4, Reboot # LABEL backup # MENU LABEL backup kernel # LINUX /boot/Image.backup # INITRD /boot/initrd # APPEND ${cbootargs} LABEL real-time MENU LABEL real-time kernel LINUX /boot/Image.real-time INITRD /boot/initrd APPEND ${cbootargs} root=/dev/mmcblk0p1 rw rootwait rootfstype=ext4 mminit_loglevel=4 console=ttyTCU0,115200 firmware_class.path=/etc/firmware fbcon=map:0 nospectre_bhb video=efifb:off console=tty0 ``` </details> <ul> <li>예시) DEFAULT 값을 <code class="language-plaintext highlighter-rouge">real-time</code>으로 설정:</li> </ul> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>DEFAULT real-time
</code></pre></div></div> <ul> <li>reboot 후 <code class="language-plaintext highlighter-rouge">uname -r</code>로 확인</li> </ul> <h3 id="5-제거-시">5. 제거 시</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt remove nvidia-l4t-rt-kernel nvidia-l4t-rt-kernel-headers nvidia-l4t-rt-kernel-oot-modules nvidia-l4t-display-rt-kernel
<span class="nb">sudo </span>reboot
</code></pre></div></div> <h2 id="python에서-실시간-우선순위-설정하기">Python에서 실시간 우선순위 설정하기</h2> <p>실시간 커널만으로는 모든 사용자 애플리케이션이 실시간이 되지 않습니다. Python 스크립트도 실시간 우선순위로 실행되어야 합니다.</p> <h3 id="1-python에-cap_sys_nice-권한-부여">1. Python에 <code class="language-plaintext highlighter-rouge">cap_sys_nice</code> 권한 부여</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>setcap <span class="s1">'cap_sys_nice=eip'</span> /usr/bin/python3.8
</code></pre></div></div> <h3 id="2-실시간-스케줄링-코드-예시">2. 실시간 스케줄링 코드 예시</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">ctypes</span>

<span class="n">SCHED_FIFO</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">class</span> <span class="nc">SchedParam</span><span class="p">(</span><span class="n">ctypes</span><span class="p">.</span><span class="n">Structure</span><span class="p">):</span>
    <span class="n">_fields_</span> <span class="o">=</span> <span class="p">[(</span><span class="sh">'</span><span class="s">sched_priority</span><span class="sh">'</span><span class="p">,</span> <span class="n">ctypes</span><span class="p">.</span><span class="n">c_int</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">set_realtime_priority</span><span class="p">(</span><span class="n">priority</span><span class="o">=</span><span class="mi">99</span><span class="p">):</span>
    <span class="n">libc</span> <span class="o">=</span> <span class="n">ctypes</span><span class="p">.</span><span class="nc">CDLL</span><span class="p">(</span><span class="sh">'</span><span class="s">libc.so.6</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">param</span> <span class="o">=</span> <span class="nc">SchedParam</span><span class="p">(</span><span class="n">priority</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">libc</span><span class="p">.</span><span class="nf">sched_setscheduler</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">SCHED_FIFO</span><span class="p">,</span> <span class="n">ctypes</span><span class="p">.</span><span class="nf">byref</span><span class="p">(</span><span class="n">param</span><span class="p">))</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">실시간 우선순위 설정 실패</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <h3 id="3-사용-시">3. 사용 시</h3> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">set_realtime_priority</span><span class="p">()</span>
</code></pre></div></div> <h2 id="rtos를-활용한-ros2-설계-시-고려사항">RTOS를 활용한 ROS2 설계 시 고려사항</h2> <ul> <li><code class="language-plaintext highlighter-rouge">rclcpp::MultiThreadedExecutor</code>를 활용하여 ROS 콜백 스레드를 분리할 것</li> <li>실시간 요구가 있는 노드에는 <code class="language-plaintext highlighter-rouge">ReentrantCallbackGroup</code> 사용</li> <li>동적 메모리 할당, 동기화 객체 사용을 최소화하여 <strong>RT-safe</strong> 코드로 작성</li> <li>노드 간 통신은 DDS QoS 설정 (e.g., <code class="language-plaintext highlighter-rouge">reliable</code>, <code class="language-plaintext highlighter-rouge">deadline</code>)을 통해 시간 보장</li> </ul> <h2 id="결론">결론</h2> <p>RT 커널 설치 이후에도 Python이나 ROS2 환경에서 적절한 스케줄링과 구조 설계가 병행되어야 진정한 RTOS-like 시스템을 구축할 수 있다.</p> <hr/> <h3 id="references">References</h3> <ul> <li><a href="https://docs.nvidia.com/jetson/archives/r36.3/DeveloperGuide/SD/SoftwarePackagesAndTheUpdateMechanism.html#real-time-kernel-using-ota-update">NVIDIA RT Kernel 공식 문서</a></li> <li><a href="https://forums.developer.nvidia.com/t/applying-a-preempt-rt-patch-to-jetpack-4-5-on-jetson-nano/168428/4">Jetson 포럼의 PREEMPT_RT 적용 사례</a></li> </ul> <h2 id="설치방법-raspberry-pi">설치방법 (Raspberry PI)</h2> <ul> <li><a href="https://lemariva.com/blog/2019/09/raspberry-pi-4b-preempt-rt-kernel-419y-performance-test">Raspberry Pi 4B</a></li> <li><a href="https://sudormrf.run/2022/06/18/raspberrypi-realtime-linux/">raspberrypi-realtime-linux</a></li> </ul>]]></content><author><name></name></author><category term="OS"/><category term="RTOS"/><category term="Jetson"/><category term="2025"/><summary type="html"><![CDATA[Detailed explanation of RTOS in Jetson]]></summary></entry><entry><title type="html">How to Set Up a Python Package</title><link href="https://joonhyung-lee.github.io//blog/2024/python-package/" rel="alternate" type="text/html" title="How to Set Up a Python Package"/><published>2024-10-21T00:00:00+00:00</published><updated>2024-10-21T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2024/python-package</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2024/python-package/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>Creating a Python package is an essential skill for any Python developer. It allows you to organize your code, make it reusable, and share it with others. In this post, we’ll go through the process of setting up a Python package step by step.</p> <h2 id="setting-up-the-package-structure">Setting Up the Package Structure</h2> <ol> <li> <p>Create a new directory for your package:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>my_package
<span class="nb">cd </span>my_package
</code></pre></div> </div> </li> <li> <p>Create the following file structure:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>my_package/
├── my_package/
│   ├── __init__.py
│   └── main.py
├── tests/
│   └── test_main.py
├── README.md
├── LICENSE
└── setup.py
</code></pre></div> </div> </li> </ol> <h2 id="writing-setuppy">Writing setup.py</h2> <p>The <code class="language-plaintext highlighter-rouge">setup.py</code> file is crucial for packaging your project. Here’s a basic example:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">setuptools</span> <span class="kn">import</span> <span class="n">setup</span><span class="p">,</span> <span class="n">find_packages</span>

<span class="nf">setup</span><span class="p">(</span>
    <span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">my_package</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">version</span><span class="o">=</span><span class="sh">"</span><span class="s">0.1.0</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">packages</span><span class="o">=</span><span class="nf">find_packages</span><span class="p">(</span><span class="n">exclude</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">tests</span><span class="sh">"</span><span class="p">]),</span>
    <span class="n">install_requires</span><span class="o">=</span><span class="p">[</span>
        <span class="sh">"</span><span class="s">dependency1</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">dependency2</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="n">author</span><span class="o">=</span><span class="sh">"</span><span class="s">Your Name</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">author_email</span><span class="o">=</span><span class="sh">"</span><span class="s">your.email@example.com</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">description</span><span class="o">=</span><span class="sh">"</span><span class="s">A short description of your package</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">long_description</span><span class="o">=</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">README.md</span><span class="sh">"</span><span class="p">).</span><span class="nf">read</span><span class="p">(),</span>
    <span class="n">long_description_content_type</span><span class="o">=</span><span class="sh">"</span><span class="s">text/markdown</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">url</span><span class="o">=</span><span class="sh">"</span><span class="s">https://github.com/yourusername/my_package</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">classifiers</span><span class="o">=</span><span class="p">[</span>
        <span class="sh">"</span><span class="s">Programming Language :: Python :: 3</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">License :: OSI Approved :: MIT License</span><span class="sh">"</span><span class="p">,</span>
        <span class="sh">"</span><span class="s">Operating System :: OS Independent</span><span class="sh">"</span><span class="p">,</span>
    <span class="p">],</span>
    <span class="n">python_requires</span><span class="o">=</span><span class="sh">"</span><span class="s">&gt;=3.7</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
</code></pre></div></div> <h2 id="managing-dependencies">Managing Dependencies</h2> <p>List your package dependencies in the <code class="language-plaintext highlighter-rouge">install_requires</code> parameter of <code class="language-plaintext highlighter-rouge">setup()</code>. For development dependencies, you can create a <code class="language-plaintext highlighter-rouge">requirements.txt</code> file: In <code class="language-plaintext highlighter-rouge">requirements.txt</code>, you can write like below.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Image processing and visualization
opencv-python # or opencv-python-headless
matplotlib

# LangChain and related libraries
langchain
langchain-core
langchain_openai
langchain_anthropic
redis
python-dotenv

# Database
mysql-connector-python

# Additional requirements
numpy
# torch # (Need to check the Jetpack version if on Jetson)
openai
anyio
pydantic
scipy
</code></pre></div></div> <h2 id="version-control-with-git">Version Control with Git</h2> <ol> <li> <p>Initialize a Git repository:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div> </div> </li> <li> <p>Create a <code class="language-plaintext highlighter-rouge">.gitignore</code> file:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>__pycache__/
*.pyc
*.egg-info/
dist/
build/
.pytest_cache/
</code></pre></div> </div> </li> <li> <p>Make your first commit:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s2">"Initial commit"</span>
</code></pre></div> </div> </li> </ol> <h2 id="building-and-publishing">Building and Publishing</h2> <ol> <li> <p>Install build tools:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>build twine
</code></pre></div> </div> </li> <li> <p>Build your package:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> build
</code></pre></div> </div> </li> <li> <p>Upload to PyPI (ensure you have an account):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>twine upload dist/<span class="k">*</span>
</code></pre></div> </div> </li> </ol> <h2 id="installing-your-package">Installing Your Package</h2> <p>Once published, you can install your package using pip:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>my_package
</code></pre></div></div> <p>For development or to install from GitHub:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>git+https://github.com/yourusername/my_package.git
</code></pre></div></div> <h2 id="updating-your-package">Updating Your Package</h2> <ol> <li>Update your code and increment the version number in <code class="language-plaintext highlighter-rouge">setup.py</code>.</li> <li>Rebuild and republish: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> build
twine upload dist/<span class="k">*</span>
</code></pre></div> </div> </li> </ol> <p>To update an installed package:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">--upgrade</span> my_package
</code></pre></div></div> <p>Or for a GitHub-installed package:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">--upgrade</span> <span class="nt">--force-reinstall</span> git+https://github.com/yourusername/my_package.git
</code></pre></div></div> <h2 id="automating-package-publishing-with-github-actions">Automating Package Publishing with GitHub Actions</h2> <p>To automate the process of publishing your package to PyPI whenever you push a new release, you can use GitHub Actions. Here’s how to set it up:</p> <ol> <li>Create a <code class="language-plaintext highlighter-rouge">.github/workflows/publish.yml</code> file in your repository:</li> </ol> <pre><code class="language-yaml:.github/workflows/publish.yml">name: Publish Python Package

on:
  release:
    types: [created]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    - name: Build and publish
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $
      run: |
        python -m build
        twine upload dist/*
</code></pre> <p>This workflow will trigger whenever you create a new release on GitHub. It sets up Python, installs the necessary dependencies, builds your package, and uploads it to PyPI using the credentials stored in GitHub Secrets.</p> <ol> <li>Store your PyPI API token as a secret in your GitHub repository: <ul> <li>Go to your repository on GitHub</li> <li>Click on “Settings” &gt; “Secrets” &gt; “New repository secret”</li> <li>Name the secret <code class="language-plaintext highlighter-rouge">PYPI_API_TOKEN</code> and paste your PyPI API token as the value</li> </ul> </li> </ol> <h2 id="managing-pypi-credentials-with-pypirc">Managing PyPI Credentials with .pypirc</h2> <p>For local development and manual uploads, you can use a <code class="language-plaintext highlighter-rouge">.pypirc</code> file to store your PyPI credentials securely. Here’s how to set it up:</p> <ol> <li>Create a <code class="language-plaintext highlighter-rouge">.pypirc</code> file in your home directory:</li> </ol> <pre><code class="language-ini:.pypirc">[distutils]
index-servers =
    pypi
    testpypi

[pypi]
username = __token__
password = your_pypi_api_token

[testpypi]
repository = https://test.pypi.org/legacy/
username = __token__
password = your_testpypi_api_token
</code></pre> <p>Replace <code class="language-plaintext highlighter-rouge">your_pypi_api_token</code> and <code class="language-plaintext highlighter-rouge">your_testpypi_api_token</code> with your actual API tokens for PyPI and TestPyPI respectively.</p> <ol> <li>Set appropriate permissions for the <code class="language-plaintext highlighter-rouge">.pypirc</code> file:</li> </ol> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>600 ~/.pypirc
</code></pre></div></div> <p>This ensures that only you can read or write to the file.</p> <p>With this setup, you can easily publish your package using <code class="language-plaintext highlighter-rouge">twine</code> without having to enter your credentials each time. For example:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>twine upload dist/<span class="k">*</span>
</code></pre></div></div> <p>Remember to never commit the <code class="language-plaintext highlighter-rouge">.pypirc</code> file to your version control system, as it contains sensitive information. And finally you can see the installed package like below image.</p> <div align="center"> <img src="/assets/python_package/terminal_result.png" width="95%"/> <p>Installed package</p> </div>]]></content><author><name></name></author><category term="python"/><category term="python"/><category term="setup"/><category term="package"/><category term="2024"/><summary type="html"><![CDATA[A comprehensive guide on creating and managing a Python package]]></summary></entry><entry><title type="html">Setup in Mac OS</title><link href="https://joonhyung-lee.github.io//blog/2024/setup/" rel="alternate" type="text/html" title="Setup in Mac OS"/><published>2024-10-15T00:00:00+00:00</published><updated>2024-10-15T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2024/setup</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2024/setup/"><![CDATA[<h2 id="install-homebrew">Install Homebrew</h2> <p>터미널에서 다음 명령어를 실행하세요:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/bin/bash <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div> <p>설치가 완료되면, Homebrew를 PATH에 추가해야 합니다. M1 Mac의 경우 다음 명령어들을 순서대로 실행하세요:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'eval "$(/opt/homebrew/bin/brew shellenv)"'</span> <span class="o">&gt;&gt;</span> ~/.zprofile
<span class="nb">eval</span> <span class="s2">"</span><span class="si">$(</span>/opt/homebrew/bin/brew shellenv<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div> <p>변경사항을 적용하기 위해 터미널을 새로 열거나 다음 명령어로 설정을 다시 불러오세요:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> ~/.zprofile
</code></pre></div></div> <p>Homebrew가 제대로 설치되었는지 확인하려면 다음 명령어를 실행하세요:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nt">--version</span>
</code></pre></div></div> <h2 id="install-pyenv">Install Pyenv</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>pyenv
</code></pre></div></div> <h2 id="install-pyenv-virtualenv">Install Pyenv-virtualenv</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>pyenv-virtualenv
</code></pre></div></div> <p>pyenv activate atlo eval “$(pyenv virtualenv-init -)” pyenv activate atlo</p> <p>pyenv –version pyenv virtualenv –version</p> <p>설정 파일에 pyenv 초기화 코드가 있는지 확인하세요. ~/.zshrc 또는 ~/.bash_profile 파일에 다음 라인들이 있어야 합니다: eval “$(pyenv init -)” eval “$(pyenv virtualenv-init -)” pyenv versions</p> <h2 id="install-jekyll">Install Jekyll</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>jekyll bundler
<span class="nb">sudo </span>gem <span class="nb">install </span>google-protobuf <span class="nt">-v</span> 3.23.4 <span class="nt">--</span> <span class="nt">--with-cflags</span><span class="o">=</span><span class="s2">"-Wno-error=implicit-function-declaration"</span>
bundle <span class="nb">install
</span>brew <span class="nb">install </span>rbenv
<span class="nb">echo</span> <span class="s1">'eval "$(rbenv init -)"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">source</span> ~/.zshrc
<span class="nb">sudo </span>gem <span class="nb">install </span>bundler jekyll

</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rbenv <span class="nb">install </span>3.1.2
rbenv global 3.1.2
</code></pre></div></div> <p>그 이후에 다음의 명령어를 실행하여 로컬에서 서버를 실행할 수 있습니다.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve
</code></pre></div></div> <p>최종적으로 다음의 터미널 결과가 나오게 되며, 웹사이트가 구동된다.</p> <div align="center"> <img src="/assets/img/mac/mac_terminal.png" width="95%"/> <p>Mac Terminal</p> </div>]]></content><author><name></name></author><category term="setup"/><category term="setup/mac"/><category term="mac"/><category term="setup"/><category term="2024"/><summary type="html"><![CDATA[Setup in Mac OS]]></summary></entry><entry><title type="html">[paper-review] Text2Reaction : Enabling Reactive Task Planning Using Large Language Models</title><link href="https://joonhyung-lee.github.io//blog/2024/text2react/" rel="alternate" type="text/html" title="[paper-review] Text2Reaction : Enabling Reactive Task Planning Using Large Language Models"/><published>2024-03-24T00:00:00+00:00</published><updated>2024-03-24T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2024/text2react</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2024/text2react/"><![CDATA[<blockquote> <p>RA-L, 2024. [<a href="https://ieeexplore.ieee.org/document/10452794">Paper</a>]</p> <p>Zejun Yang , Li Ning, Haitao Wang, Tianyu Jiang, Shaolin Zhang, Shaowei Cui, Hao Jiang, Chunpeng Li, Shuo Wang and Zhaoqi Wang</p> <p>May. 05.</p> </blockquote> <div align="center"> <img src="/assets/img/text2react/overview.png" width="50%"/> <p>Fig. 1: Overview of Text2React.</p> </div> <h4 id="title">Title:</h4> <p>Text2Reaction : Enabling Reactive Task Planning Using Large Language Models (R-AL, 2024)</p> <h4 id="summary">Summary:</h4> <p>They propose Text2Reaction, an LLM-based framework enabling robots to continuously reason and update plans according to the latest environment changes.</p> <h4 id="contribution">Contribution:</h4> <div align="center"> <img src="/assets/img/text2react/flowchart.png" width="50%"/> <p>Fig. 2: Flowchart of Text2React.</p> </div> <div align="center"> <img src="/assets/img/text2react/reasoning-step.png" width="50%"/> <p>Fig. 3: Reasoning Steps of Text2React.</p> </div> <ul> <li>They present the Re-planning Prompt, which informs LLMs the basic principles of re-planning. <ul> <li>It fosters the gradual development of a current plan to a new one in a three-hop reasoning manner: cause analysis, consequence inference, and plan adjustment</li> </ul> </li> <li>OffPlanner: an LLM-based planner that generates initial plans</li> <li>On-Planner: another planner, which updates plans under the guidance of the re-planning prompts</li> </ul> <h4 id="thoughts">Thoughts:</h4> <ul> <li>Re-planning is an important part of the reactive robot. <ul> <li>They showed an LLM-based framework capable of comprehensively analyzing various feedback and continuously re-planning in response to environment changes.</li> </ul> </li> <li>They propose new evaluation metrics for the success rate of task replanning: Executability Rate(ER), Success weighted by Path Length(SPL).</li> </ul>]]></content><author><name></name></author><category term="paper-review"/><category term="paper-review/manipulation"/><category term="paper-review/LLM"/><category term="LLM"/><category term="Object Manipulation"/><category term="Replanning"/><category term="RA-L"/><category term="2024"/><summary type="html"><![CDATA[paper review about Text2React]]></summary></entry><entry><title type="html">[paper-review] CoPa: General Robotic Manipulation through Spatial Constraints of Parts with Foundational Model</title><link href="https://joonhyung-lee.github.io//blog/2024/copa/" rel="alternate" type="text/html" title="[paper-review] CoPa: General Robotic Manipulation through Spatial Constraints of Parts with Foundational Model"/><published>2024-03-17T00:00:00+00:00</published><updated>2024-03-17T00:00:00+00:00</updated><id>https://joonhyung-lee.github.io//blog/2024/copa</id><content type="html" xml:base="https://joonhyung-lee.github.io//blog/2024/copa/"><![CDATA[<blockquote> <p>ArXiv, 2024. [<a href="https://arxiv.org/abs/2403.08248">Paper</a>] [<a href="https://copa-2024.github.io/">Project</a>]</p> <p>Haoxu Huang<sup>2,3,4*</sup>, Fanqi Lin<sup>1,2,4*</sup>, Yingdong Hu<sup>1,2,4</sup>, Shengjie Wang<sup>1,2,4</sup>, Yang Gao<sup>1,2,4</sup> &gt; <sup>1</sup>Institute of Interdisciplinary Information Sciences, Tsinghua University. <sup>2</sup>Shanghai Qi Zhi Institute. <sup>3</sup>Shanghai Jiao Tong University. <sup>4</sup>Shanghai Artificial Intelligence Laboratory. <sup>*</sup> The first two authors contributed equally.</p> <p>Mar. 13.</p> </blockquote> <div align="center"> <img src="/assets/img/copa/copa-overview.png" width="50%"/> <p>Fig. 1: Overview of CoPa.</p> </div> <h4 id="title">Title</h4> <p>CoPa: General Robotic Manipulation through Spatial Constraints of Parts with Foundational Model (2024, ArXiv)</p> <h4 id="summary">Summary:</h4> <ul> <li>They introduce a framework CoPa, which generates a sequence of 6-DoF end-effector poses for open-world robotic manipulation.They introduce a framework CoPa, which generates a sequence of 6-DoF end-effector poses for open-world robotic manipulation.</li> </ul> <h4 id="contributions">Contributions.</h4> <ul> <li>Task-Oriented Grasping Module <ul> <li>Firstly, they annotate the grasping object leveraging SoM method. (Coarse-Grained Object Grounding)</li> <li>Sequentially crop the image into the region of interest (ROI) of the grasped object. Annotate the grasp contact point in the pixel coordinates of the image. Take a sample grasp pose from GraspNet and match it to the annotated contact point. (Fine-grained part grounding)</li> </ul> </li> <li>Task-Aware Motion Planning Module <ul> <li>This module is used to obtain a series of post-grasp poses. Given the instruction and the current observation, they first employ a grounding module to identify task-relevant parts within the scene.</li> <li>Subsequently, these parts are modeled in 3D, and are then projected and annotated onto the scene image. Following this, VLMs are utilized to generate spatial constraints for these parts. Finally, a solver is applied to calculate the post-grasp poses based on these constraints.</li> </ul> </li> </ul> <h4 id="thoughts">Thoughts.</h4> <ul> <li>They presented their methodology in a very clear way: Combine (I) high-level task planning, which determines what to do next, and (ii) low-level robotic control, focusing on the precise actuation of joints. <ul> <li>Now the GPT-X model can be used in robotic tasks to think like a human.</li> </ul> </li> <li>They demonstrate the seamless integration with ViLa to accomplish long-horizon tasks. <ul> <li>The high-level planner generates a sequence of sub-goals, which are then executed by CoPa.</li> <li>The results show that CoPa can be easily integrated with existing high-level planning algorithms to accomplish complex, long-horizon tasks.</li> </ul> </li> </ul>]]></content><author><name></name></author><category term="paper-review"/><category term="paper-review/manipulation"/><category term="paper-review/LLM"/><category term="VLMs"/><category term="Object Manipulation"/><category term="ArXiv"/><category term="2024"/><summary type="html"><![CDATA[paper review about CoPa]]></summary></entry></feed>